{
    "name": "Cluster numerical data with or without predefined number of classes",
    "description": "Run either K-Means or DBSCAN clustering on a numerical dataset. The tool will generate a new column in the input CSV file that contains the cluster labels.\n\n## Input\n* file - The CSV file that contains numerical data to run clustering analysis\n* cluster_columns - A list of columns for the numerical values in the CSV file to be used for clustering. If not provided, this will be an empty list and all numerical columns will be used.\n* n_clusters - The number of clusters to be generated. If provided, the tool will run K-Means with this specified K value. Otherwise, it will run DBSCAN clustering that automatically defines the number of classes. \n* additional_params - An optional dictionary that contains additional parameters for the clustering algorithm. \n\n## Output\nA CSV file and a description of the analysis that includes the clustering algorithm used, number of clustered labels, the list of features used from the original file, and the name of the generated file. ",
    "category": "Informatics",
    "args_list": [
      {
        "type": "file",
        "name": "file",
        "description": "The CSV file that contains numerical data to run clustering analysis",
        "default": null
      },
      {
        "type": "list",
        "name": "cluster_columns",
        "description": "A list of columns for the numerical values in the CSV file to be used for clustering. If not provided, this will be an empty list and all numerical columns will be used.",
        "default": null
      },
      {
        "type": "integer",
        "name": "n_clusters",
        "description": "The number of clusters to be generated. If provided, the tool will run K-Means with this specified K value. Otherwise, it will run DBSCAN clustering that automatically defines the number of classes. ",
        "default": -1
      },
      {
        "type": "dict",
        "name": "additional_params",
        "description": "An optional dictionary that contains additional parameters for the clustering algorithm. ",
        "default": "{}"
      }
    ],
    "type": "python",
    "config": {
      "dockerfile_prep": "",
      "requirements": "pandas\nnumpy\nscikit-learn\n",
      "code": "import pandas as pd\nfrom datetime import datetime\n\ndef create_timestamp() -> str:\n  # helper function to create a unique timestamp\n  dt = str(datetime.now())\n  return dt.replace(\"-\", \"_\").replace(\":\", \"_\").replace(\" \", \"_\")\n\ndef perform_kmeans(data, n_clusters, additional_params={}):\n    from sklearn.cluster import KMeans\n    kmeans = KMeans(n_clusters=n_clusters, **additional_params)\n    kmeans.fit(data)\n    return kmeans.labels_\n\ndef perform_dbscan(data, additional_params={}):\n    from sklearn.cluster import DBSCAN\n    dbscan = DBSCAN(**additional_params)\n    dbscan.fit(data)\n    return dbscan.labels_\n\ndef run(file, cluster_columns, n_clusters=-1, additional_params={}):\n    '''\n    Run either K-Means or DBSCAN clustering on a numerical dataset. \n    The tool will generate a new column in the input CSV file that contains the cluster labels.\n    '''\n    \n\n            \n    ## Read data from a CSV file\n    data_df = pd.read_csv(file)\n    if len(cluster_columns) == 0:\n        clean_data = data_df.select_dtypes(include=['float'])\n    else:\n        missing_columns = [column for column in cluster_columns if column not in data_df.columns]\n        assert len(missing_columns) == 0, \"These columns are not present in the data: \" + str(missing_columns)\n        clean_data = data_df[cluster_columns]\n    clean_data = clean_data.dropna(axis=1)\n    data_sets = clean_data.columns\n    data_array = clean_data.values\n\n    ## Run K-Means or DBSCAN based on n_clusters param\n    if n_clusters > 0:\n        method = \"K-Means\"\n        cluster_labels = perform_kmeans(data_array, n_clusters, additional_params)\n    else:\n        method = \"DBSCAN\"\n        cluster_labels = perform_dbscan(data_array, additional_params)\n        n_clusters = len(set(cluster_labels))\n\n\n    ## Append labels to OG CSV\n    label_df = pd.DataFrame(cluster_labels, columns=[\"Label\"])\n    final_data_df = pd.concat([data_df, label_df], axis=1)\n\n    ## Create the File Name\n    filename = f'{(file.split(\".csv\")[0])}_{method}_clustered_{n_clusters}_{create_timestamp()}.csv'\n\n\n    ## Create the File\n    final_data_df.to_csv(filename, index=False)\n\n    print(f\"Successfully clustered data into {n_clusters} classes using {method}.\"+\n        f\"\\n\\nThe following columns were able to be used: {', '.join(list(data_sets))}\"+\n        f\"\\n\\nThe clustered labels have been added to your data table in {filename}.\")\n    "
    }
  }